{"pageProps":{"post":{"title":"三角関数","slug":"7ca0ca88","content":"<h2>コード例</h2>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// rad = ラジアン角度</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">tan</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">atan</span><span class=\"token punctuation\">(</span>tan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2>解説/アルゴリズム</h2>\n<h3>コサイン/サイン（cos/sin）</h3>\n<p><img src=\"./static/images/7ca0ca88/0.png\" alt=\"\"></p>\n<p>半径 1 の円を用意して、円の中央位置が原点 (0, 0) になるように配置する。</p>\n<p>原点から角 θ の方向に長さ 1 だけ進んだ位置、つまり円周上にある点の位置を求める。</p>\n<p>進む距離（上記画像の青線）を 1 と固定すれば、角 θ によって点(x, y)が決まる。</p>\n<p>具体的な点(x, y)を求めるには、三角関数の cos / sin という機能を使用する。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>角θ<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> 角θ方向に<span class=\"token number\">1</span>進んだときのx座標を計算する<span class=\"token punctuation\">;</span>\n<span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>角θ<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> 角θ方向に<span class=\"token number\">1</span>進んだときのy座標を計算する<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>通常は、cos(角 θ)を cosθ、sin(角 θ)を sinθ と書く。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">cos30° <span class=\"token operator\">=</span> <span class=\"token number\">30</span>°方向に<span class=\"token number\">1</span>進んだときのx座標を計算する\nsin30° <span class=\"token operator\">=</span> <span class=\"token number\">30</span>°方向に<span class=\"token number\">1</span>進んだときのy座標を計算する\n</code></pre>\n<p>角度が具体的に決まっている場合、たとえば角度が 30° だと、cos30° / sin30° と書く。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> deg <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30°</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 角度を指定してはいけない。</span>\n\n<span class=\"token keyword\">const</span> rad <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 角をラジアンに変換。</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正しい値が返却される。</span>\n</code></pre>\n<p>次は実際に JavaScript に実装されている三角関数を使用する。</p>\n<p>cos / sin は Math クラスに実装されており、Math.cos() / Math.sin()で利用できる。</p>\n<p>引数には角度を指定するが、わたしたちが普段使用している 0° ～ 360° の角度を指定することができない。</p>\n<p>代わりにラジアンという単位の角度を指定する。</p>\n<p>ラジアンについては<a href=\"/13cc4d6d\">専用の記事</a>を用意している。</p>\n<p>簡略に説明すると、角度からラジアンに変換するには、角度 * 円周率 / 180 という計算になる。</p>\n<p>円周率の値は Math.PI で参照できる。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> deg <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30°</span>\n<span class=\"token keyword\">const</span> rad <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>deg <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 角をラジアンに変換。</span>\n\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.8660...</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.5</span>\n</code></pre>\n<p>30° の方向に 1 進んだときの x 座標がおよそ 0.8660、y 座標が 0.5 だということがわかる。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> deg <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -30°</span>\n<span class=\"token keyword\">const</span> rad <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>deg <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 角をラジアンに変換。</span>\n\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.8660...</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -0.5</span>\n</code></pre>\n<p>0 を原点とした座標なので、cos/sin の結果がマイナスになる場合がある。</p>\n<p>-30° の方向に 1 進んだ y 座標は負数になる。</p>\n<h3>θ 方向に進む距離を可変にする場合</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 青線の長さ</span>\n<span class=\"token keyword\">const</span> deg <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30°</span>\n<span class=\"token keyword\">const</span> rad <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>deg <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 角をラジアンに変換。</span>\n\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4.3301...</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2.5</span>\n</code></pre>\n<p>θ 方向に進む距離を 1 ではなく任意の距離にしたい場合がある。</p>\n<p>先に結論をいうと、距離を<code>r</code>と置くと、x 座標は<code>cosθ * r</code>、y 座標は<code>sinθ * r</code>で求まる。</p>\n<p><img src=\"./static/images/7ca0ca88/1.png\" alt=\"\"></p>\n<p>(x, y), (x, 0), (0, 0) を結ぶと、直角三角形ができるのがわかる。</p>\n<p>ここで青線の長さを変えた場合、同じように点を結んで、できる形はやはり直角三角形で、角 θ の角度は変わらない。</p>\n<p>2 つの三角形を用意して、2 つの角が共通の場合、その 2 つの三角形は形が同じでスケールが違うだけの関係と証明することができ、相似の条件と呼ぶ。</p>\n<p>上記画像にある青線の長さ 1 の三角形も、長さを r にした三角形も、角 θ と直角が共通しているので、２つの三角形は相似である、ということがわかる。</p>\n<p>相似であると、各辺の比は、辺の長さに関わらず常に同じになるという特徴がある。</p>\n<p>青線の長さを 1 から r に変えるということは長さを r 倍にするということなので、相似の三角形の辺である、緑線・赤線の長さも r 倍になる。</p>\n<p>緑線・赤線はそれぞれ青線を引いた先の (x, y) に対応する。</p>\n<p>なので、青線の長さを r 倍にすると、x (あるいは cosθ ) が r 倍、y (あるいは sinθ )が r 倍になる。</p>\n<h3>タンジェント（tan）</h3>\n<p>原点(0, 0)から(cosθ, sinθ)まで直線を引いたときの角度、つまり直線と x 軸とのなす角 θ の傾きを tanθ と表す。</p>\n<p>直線の傾きは<code>yの増加量 / xの増加量</code>で求め、<code>tanθ = sinθ / cosθ</code>と考えることができる。</p>\n<h3>アークタンジェント（atan/atan2）</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">atan</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ラジアン値で返却される</span>\n</code></pre>\n<p>atan(x)は tanθ = x となる θ を計算する。</p>\n<p>つまり直線の傾きを入れると θ を計算してくれる。</p>\n<p>たとえば atan(1) の場合、傾きが 1 となる角度だから 45 度に応じたラジアン値（0.7853...）が返却される。</p>\n<p>この関数が返す値の範囲は角度で言うと -90 度～ 90 度までとなる。</p>\n<p>というのも、円一周 360 度で考えると、傾きが 1 になる角度は、45 度だけではなく 225 度でも同様だが、これだと atan はどちらを返せばいいのかが分からなくなるので、180 度の範囲で限定されている。</p>\n<p>45 度と 225 度を区別するように範囲を 0 ～ 360 度で考えたい場合は、代替となる atan2 という関数を使用する。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ラジアン値で返却される</span>\n</code></pre>\n<p>atan2(y, x) は tanθ = y / x となる θ を計算する。</p>\n<p>順番が (y, x) と y を先に指定するので注意が必要。</p>\n<p>atan(x) と違い、引数には傾きを求める計算前の (y, x) を指定するので、例えば傾きが 45 度で同じになる (1, 1) と (-1, -1) が区別できる。</p>\n<p>タンジェントの逆関数の値を計算したい場合は atan を、点の偏角を求めたい場合は atan2() を使用するとよい。</p>\n<h2>内部で利用しているアルゴリズム</h2>\n<p><a href=\"/13cc4d6d\">ラジアン</a></p>\n"}},"__N_SSG":true}