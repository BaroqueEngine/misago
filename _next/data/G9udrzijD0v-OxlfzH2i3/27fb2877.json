{"pageProps":{"post":{"title":"値を別の値単位で丸める","slug":"27fb2877","content":"<h2>概要</h2>\n<p>2 つの値 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mn>0</mn><mo>&lt;</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A, B\\thinspace(0 &lt; B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> を渡すと、A の値に近い B の倍数値を返す。</p>\n<p>A が B の倍数なら、そのまま A を返すが、B の倍数でないなら、丸め処理を使用して近い倍数値を返す。</p>\n<h2>コード例</h2>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> unit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">/</span> unit<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> unit<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> unit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">/</span> unit<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> unit<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> unit <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\"><=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">floor(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>unit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\"><=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ceil(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>unit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">floor(-10, 3) = -12\nfloor(-9, 3) = -9\nfloor(-8, 3) = -9\nfloor(-7, 3) = -9\nfloor(-6, 3) = -6\nfloor(-5, 3) = -6\nfloor(-4, 3) = -6\nfloor(-3, 3) = -3\nfloor(-2, 3) = -3\nfloor(-1, 3) = -3\nfloor(0, 3) = 0\nfloor(1, 3) = 0\nfloor(2, 3) = 0\nfloor(3, 3) = 3\nfloor(4, 3) = 3\nfloor(5, 3) = 3\nfloor(6, 3) = 6\nfloor(7, 3) = 6\nfloor(8, 3) = 6\nfloor(9, 3) = 9\nfloor(10, 3) = 9\n\nceil(-10, 3) = -9\nceil(-9, 3) = -9\nceil(-8, 3) = -6\nceil(-7, 3) = -6\nceil(-6, 3) = -6\nceil(-5, 3) = -3\nceil(-4, 3) = -3\nceil(-3, 3) = -3\nceil(-2, 3) = 0\nceil(-1, 3) = 0\nceil(0, 3) = 0\nceil(1, 3) = 3\nceil(2, 3) = 3\nceil(3, 3) = 3\nceil(4, 3) = 6\nceil(5, 3) = 6\nceil(6, 3) = 6\nceil(7, 3) = 9\nceil(8, 3) = 9\nceil(9, 3) = 9\nceil(10, 3) = 12\n</code></pre>\n<h3>下駄付きで丸める場合</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> interval <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\"><</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\"><</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> start<span class=\"token punctuation\">,</span> interval<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">0 5\n1 5\n2 5\n3 5\n4 5\n5 5\n6 11\n7 11\n8 11\n9 11\n10 11\n11 11\n12 17\n</code></pre>\n<p>下限が 0 でない場合の丸め方。</p>\n<p>下限が 5 で、倍数値が 6 で丸める例。</p>\n<h2>ソースコード</h2>\n<h3>TypeScript</h3>\n<p><a href=\"./static/code/27fb2877/app.ts\">app.ts</a></p>\n<h3>C++</h3>\n<p><a href=\"./static/code/27fb2877/a.cpp\">a.cpp</a></p>\n<h2>解説/アルゴリズム</h2>\n<h3>floor（左側にある一番近くの倍数値に丸める場合）</h3>\n<p>たとえば、 25 を 6 単位で丸める場合、 <code>25 / 6 = 4.16...</code> で割り切れない。</p>\n<p>そこで、 <code>4.16...</code> の小数点以下を<a href=\"/0fd2eac9\">切り捨て</a>、整数値 4 に変換する。</p>\n<p><code>6 x 4 = 24</code> が 25 を 6 単位で左側に丸めた結果になる。</p>\n<p>この関数は負の値でも動作し、たとえば、 -25 を 6 単位で丸めると -30 になる。</p>\n<h3>ceil（右側にある一番近くの倍数値に丸める場合）</h3>\n<p>たとえば、 25 を 6 単位で丸める場合、 <code>25 / 6 = 4.16...</code> で割り切れない。</p>\n<p>そこで、 <code>4.16...</code> の小数点以下を<a href=\"/286b997e\">切り上げ</a>、整数値 5 に変換する。</p>\n<p><code>6 x 5 = 30</code> が 25 を 6 単位で右側に丸めた結果になる。</p>\n<p>この関数は負の値でも動作し、たとえば、 -25 を 6 単位で丸めると -24 になる。</p>\n<h2>内部で利用しているアルゴリズム</h2>\n<p><a href=\"/0fd2eac9\">床関数</a>, <a href=\"/286b997e\">天井関数</a>, <a href=\"/6425003d\">ROUND 関数</a></p>\n"}},"__N_SSG":true}