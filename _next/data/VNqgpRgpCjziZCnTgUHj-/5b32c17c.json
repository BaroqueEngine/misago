{"pageProps":{"post":{"title":"ダイクストラ法","slug":"5b32c17c","content":"<h2>解説/アルゴリズム</h2>\n<p><img src=\"./static/images/5b32c17c/1.png\" alt=\"\">\n辺に重み（コスト）が付いているグラフのことを重み付きグラフと呼び、上記画像のような形となります。<br>\n重みはノード間の移動距離や時間を表しており、上記画像の ABCD の各ノードは駅名、辺の数字は駅間の移動時間だと考えてみましょう。</p>\n<p>たとえば A 駅から D 駅までを最短の時間で移動したい場合、A 駅から D 駅へと直接移動すると 20 分かかりますが、A 駅-&gt;B 駅-&gt;C 駅-&gt;D 駅と移動すると 18 分で済みます。</p>\n<p>このように重み付きグラフの場合、移動ノードが短かければ最短経路になるとは限りません。<br>\nこれから説明するダイクストラ法は重み付きグラフにおいて最短経路を求めるアルゴリズムとなります。</p>\n<p>ただし辺の重みに負数が含まれる場合はダイクストラ法を利用することはできません。</p>\n<p><img src=\"./static/images/5b32c17c/2.png\" alt=\"\">\n解説用に新たに重み付きグラフを用意しました。<br>\nA からスタートをしようと思います。</p>\n<p><img src=\"./static/images/5b32c17c/3.png\" alt=\"\">\nA からスタートをしているので、当然ながら A までの最短距離は 0 になります。</p>\n<p>画像ではわかりやすいように、確定したノードの付近にそのノードまでの最短距離を書き、ノードの色を赤で変更しています。</p>\n<ul>\n<li>確定ノード: [A]</li>\n<li>A までの最短距離: 0 / ルート: [A] (確定)</li>\n</ul>\n<p><img src=\"./static/images/5b32c17c/4.png\" alt=\"\">\n最短経路が確定した A に繋がっているノードに A からの距離を書き加えておきます。<br>\n（A-B / A-F / A-E 間の距離を、各ノードに保持しておきます。）</p>\n<p>A に繋がっているこれらのノードは次に最短経路が確定するかもしれない未確定ノードです。</p>\n<p>画像ではわかりやすいように、未確定ノードの色とルートを青色に変更しています。</p>\n<ul>\n<li>未確定ノード: [B, F, E]</li>\n<li>確定ノード: [A]</li>\n<li>A までの最短距離: 0 / ルート: [A] (確定)</li>\n<li>B までの最短距離: 9 / ルート: [A-B] (未確定)</li>\n<li>F までの最短距離: 4 / ルート: [A-F] (未確定)</li>\n<li>E までの最短距離: 3 / ルート: [A-E] (未確定)</li>\n</ul>\n<p><img src=\"./static/images/5b32c17c/5.png\" alt=\"\">\n開始地点から一番短い経路で繋がっている未確定ノードを探します。<br>\nA-B / A-F / A-E の中では、A-E 間の距離が一番短いので、E まで移動するには、A-E 間が最短であることが確定します。</p>\n<p>何故かというと最短経路が確定している A に繋がっているノードの中で、一番短い経路が A-E なので、他の経路、たとえば A-F や A-B から E の方に周りこんだルートが A-E より小さくなることはありえないからです。</p>\n<ul>\n<li>未確定ノード: [B, F]</li>\n<li>確定ノード: [A, E]</li>\n<li>A までの最短距離: 0 [A] (確定)</li>\n<li>B までの最短距離: 9 [A-B] (未確定)</li>\n<li>F までの最短距離: 4 [A-F] (未確定)</li>\n<li>E までの最短距離: 3 [A-E] (確定)</li>\n</ul>\n<p><img src=\"./static/images/5b32c17c/6.png\" alt=\"\">\n最短経路が確定した E に繋がっているノードである D と F に注目します。</p>\n<p>D は新しく繋がった未確定ノードです。<br>\nそれに加え、E には 3 という開始地点からの距離が保持されていますが、それに E-D 間の距離を足した 8 を D に書き込んでおきます。<br>\nつまり、まだ未確定ですが、開始地点からの最短距離を暫定的にノードに書き込んでおくわけです。</p>\n<p>F はすでに候補になっているノードなので、開始地点から F までの暫定的な最短距離 4 が書き込まれています。<br>\nそれがさらに短くできるならば更新を行います。</p>\n<p>A-E-F の距離は 5 ですが、もともと存在していた A-F の経路の方が短いので、F までの暫定的な最短距離の情報は更新をしません。<br>\n今のところ、未確定ですが F までの最短経路は A-F のままとなります。</p>\n<ul>\n<li>未確定ノード: [B, D, F]</li>\n<li>確定ノード: [A, E]</li>\n<li>A までの最短距離: 0 [A] (確定)</li>\n<li>B までの最短距離: 9 [A-B] (未確定)</li>\n<li>D までの最短距離: 8 [A-E-D] (未確定)</li>\n<li>F までの最短距離: 4 [A-F] (未確定)</li>\n<li>E までの最短距離: 3 [A-E] (確定)</li>\n</ul>\n<p><img src=\"./static/images/5b32c17c/7.png\" alt=\"\">\n開始地点から一番短い経路で繋がっている未確定ノードを探します。<br>\nA-B / A-F / A-E-D の中では、A-F 間の距離が一番短いので、F まで移動するには、A-F 間が最短であることが確定します。</p>\n<ul>\n<li>未確定ノード: [B, D]</li>\n<li>確定ノード: [A, E, F]</li>\n<li>A までの最短距離: 0 [A] (確定)</li>\n<li>B までの最短距離: 9 [A-B] (未確定)</li>\n<li>D までの最短距離: 8 [A-E-D] (未確定)</li>\n<li>F までの最短距離: 4 [A-F] (確定)</li>\n<li>E までの最短距離: 3 [A-E] (確定)</li>\n</ul>\n<p><img src=\"./static/images/5b32c17c/8.png\" alt=\"\">\n最短経路が確定した F に繋がっているノードである B と D に注目します。<br>\nB と D に書き込まれている最短距離より、A-F から通る距離の方が短ければ、情報を更新します。</p>\n<p>B の場合、A-B の距離 9 より A-F-B の距離 7 の方が短いので、B ノードまでの最短経路が 7 に更新されます。<br>\nD の場合、A-E-D の距離 8 より A-F-D の距離 9 の方が長いので、D ノードまでの最短経路は 8 のままになります。</p>\n<ul>\n<li>未確定ノード: [B, D]</li>\n<li>確定ノード: [A, E, F]</li>\n<li>A までの最短距離: 0 [A] (確定)</li>\n<li>B までの最短距離: 7 [A-F-B] (未確定)</li>\n<li>D までの最短距離: 8 [A-E-D] (未確定)</li>\n<li>F までの最短距離: 4 [A-F] (確定)</li>\n<li>E までの最短距離: 3 [A-E] (確定)</li>\n</ul>\n<p><img src=\"./static/images/5b32c17c/9.png\" alt=\"\">\n開始地点から一番短い経路で繋がっている未確定ノードを探します。<br>\nA-B / A-E-D の中では、A-B 間の距離が一番短いので、B まで移動するには、A-B 間が最短であることが確定します。</p>\n<ul>\n<li>未確定ノード: [D]</li>\n<li>確定ノード: [A, B, E, F]</li>\n<li>A までの最短距離: 0 [A] (確定)</li>\n<li>B までの最短距離: 7 [A-F-B] (確定)</li>\n<li>D までの最短距離: 8 [A-E-D] (未確定)</li>\n<li>F までの最短距離: 4 [A-F] (確定)</li>\n<li>E までの最短距離: 3 [A-E] (確定)</li>\n</ul>\n<p><img src=\"./static/images/5b32c17c/10.png\" alt=\"\">\n最短経路が確定した B に繋がっているノードである C に注目します。</p>\n<p>C は新しく繋がった未確定ノードです。<br>\nB までの最短距離 7 に B-C 間の距離を足した 11 を C に書き込んでおきます。</p>\n<ul>\n<li>未確定ノード: [C, D]</li>\n<li>確定ノード: [A, B, E, F]</li>\n<li>A までの最短距離: 0 [A] (確定)</li>\n<li>B までの最短距離: 7 [A-F-B] (確定)</li>\n<li>C までの最短距離: 11 [A-F-B-C] (未確定)</li>\n<li>D までの最短距離: 8 [A-E-D] (未確定)</li>\n<li>F までの最短距離: 4 [A-F] (確定)</li>\n<li>E までの最短距離: 3 [A-E] (確定)</li>\n</ul>\n<p><img src=\"./static/images/5b32c17c/11.png\" alt=\"\">\n開始地点から一番短い経路で繋がっている未確定ノードを探します。<br>\nA-F-B-C / A-E-D の中では、A-E-D 間の距離が一番短いので、D まで移動するには、A-E-D 間が最短であることが確定します。</p>\n<ul>\n<li>未確定ノード: [C]</li>\n<li>確定ノード: [A, B, D, E, F]</li>\n<li>A までの最短距離: 0 [A] (確定)</li>\n<li>B までの最短距離: 7 [A-F-B] (確定)</li>\n<li>C までの最短距離: 11 [A-F-B-C] (未確定)</li>\n<li>D までの最短距離: 8 [A-E-D] (確定)</li>\n<li>F までの最短距離: 4 [A-F] (確定)</li>\n<li>E までの最短距離: 3 [A-E] (確定)</li>\n</ul>\n<p><img src=\"./static/images/5b32c17c/12.png\" alt=\"\">\n最短経路が確定した D に繋がっているノードである C に注目します。<br>\nC に書き込まれている最短距離より、A-E-D から通る距離の方が短ければ、情報を更新します。</p>\n<p>C の場合、A-F-B-C の距離 11 より A-E-D-C の距離 10 の方が短いので、C ノードまでの最短経路が 10 に更新されます。</p>\n<ul>\n<li>未確定ノード: [C]</li>\n<li>確定ノード: [A, B, D, E, F]</li>\n<li>A までの最短距離: 0 [A] (確定)</li>\n<li>B までの最短距離: 7 [A-F-B] (確定)</li>\n<li>C までの最短距離: 10 [A-E-D-C] (未確定)</li>\n<li>D までの最短距離: 8 [A-E-D] (確定)</li>\n<li>F までの最短距離: 4 [A-F] (確定)</li>\n<li>E までの最短距離: 3 [A-E] (確定)</li>\n</ul>\n<p><img src=\"./static/images/5b32c17c/13.png\" alt=\"\">\n開始地点から一番短い経路で繋がっている未確定ノードを探します。<br>\n未確定ノードは C しか残っていないので、C まで移動するには、A-E-D-C 間が最短であることが確定します。</p>\n<ul>\n<li>未確定ノード: []</li>\n<li>確定ノード: [A, B, C, D, E, F]</li>\n<li>A までの最短距離: 0 [A] (確定)</li>\n<li>B までの最短距離: 7 [A-F-B] (確定)</li>\n<li>C までの最短距離: 10 [A-E-D-C] (確定)</li>\n<li>D までの最短距離: 8 [A-E-D] (確定)</li>\n<li>F までの最短距離: 4 [A-F] (確定)</li>\n<li>E までの最短距離: 3 [A-E] (確定)</li>\n</ul>\n<h2>コード例</h2>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> P <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span>ll<span class=\"token punctuation\">,</span> ll<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> to<span class=\"token punctuation\">;</span>\n  ll cost<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 頂点数</span>\n  <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 辺の数</span>\n  <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 始点</span>\n\n  vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Edge<span class=\"token operator\">>></span> <span class=\"token function\">edge</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 辺の登録。例えば一番上は頂点0から頂点1まで移動するのにコストが1かかることを表している</span>\n  edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 始点から各頂点までの移動総コスト</span>\n  <span class=\"token comment\">// 始点は0、それ以外の頂点は入ることがあり得ない大きい値にしておく</span>\n  <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> INF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  dist<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 未確定の頂点の中から始点からの移動総コストが最小のものを高速に取り出すため、</span>\n  <span class=\"token comment\">// 優先度付きキューを利用する</span>\n  <span class=\"token comment\">// pair{頂点までの暫定コスト, 頂点}</span>\n  priority_queue<span class=\"token operator\">&lt;</span>P<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>P<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span>P<span class=\"token operator\">>></span> pq<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 始点と始点までのコスト0を入れておく</span>\n  pq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 優先度付きキューが空になるまでループ</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 未確定の頂点の中から始点からの移動総コストが最小のものを取り出す</span>\n    <span class=\"token comment\">// この時点で、始点から取り出した頂点までの最短コストが確定する</span>\n    P p <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 具体的な名前に変更</span>\n    ll cost <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 既にcostより小さい値で確定されているのでスキップ</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> cost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 頂点に繋がっている各頂点を走査</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> edge<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 計算したコストが暫定コストより小さければ更新。</span>\n      <span class=\"token comment\">// 次の頂点を優先度付きキューに追加する</span>\n      ll new_cost <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>cost<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new_cost <span class=\"token operator\">&lt;</span> dist<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dist<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_cost<span class=\"token punctuation\">;</span>\n        pq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>new_cost<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> dist<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>キューの仕様上、同じ頂点を追加した際、別々なものとして扱うので、確定した頂点なのにまたキューからその頂点が出てくるということがあります。<br>\nその場合、無駄な走査を行わないように、<code>if (dist[cur] &lt; cost)</code>ならスキップを行うという処理を入れるのがポイントです。</p>\n"}},"__N_SSG":true}