{"pageProps":{"post":{"title":"深さ優先探索","slug":"0b021f8a","content":"<h2>実行例</h2>\n<p><img src=\"./static/images/0b021f8a/0.png\" alt=\"\">\n<a href=\"./static/play/0b021f8a/index.html\">実行結果を見る</a></p>\n<h2>ソースコード</h2>\n<h3>通常版</h3>\n<p>TypeScript: <a href=\"./static/code/0b021f8a/0/app.ts\">app.ts</a></p>\n<h3>アニメーション版</h3>\n<p>TypeScript: <a href=\"./static/code/0b021f8a/1/app.ts\">app.ts</a></p>\n<h2>解説/アルゴリズム</h2>\n<p>深さ優先探索は木構造やグラフの探索を行うためのアルゴリズムです。</p>\n<p>探索を開始するノードを選択し、そのノードに繋がっている別のノードを選択、そのノードから更に繋がっているノードを選択・・・と、ひたすら奥に向かって探索を進めます。<br>\n繋がっているノードが無くなった場合、元の道を戻り、別の方向を選び、また奥に向かって探索を行います。</p>\n<p><img src=\"./static/images/0b021f8a/1.png\" alt=\"\">\n上記のようなグラフを用意、探索を開始するノードを<code>1</code>とします。<br>\nある方向に向かってひたすら探索をしたいので、今回は左側に向かって<code>1-2-3</code>と進みます。<br>\n<code>3</code>より奥のノードは存在しないので、<code>2</code>まで戻り、別のルートである<code>4</code>まで進みます。<br>\n<code>4</code>より奥のノードは存在しないので、<code>1</code>まで戻り、別のルートである<code>5</code>まで進みます。<br>\n<code>5</code>より奥のノードは存在しないので、<code>1</code>まで戻り、別のルートである<code>6-7</code>と進みます。<br>\n<code>7</code>より奥のノードは存在しないので、<code>6</code>まで戻り、別のルートである<code>8</code>まで進みます。</p>\n<p>具体的なアルゴリズムは下記のとおりとなります。</p>\n<ol>\n<li>開始ノードを配列に加えます。</li>\n<li>配列から<code>末尾にあるノード</code>を取り出します。</li>\n<li>取り出したノードにつながっている<code>未探索のノード</code>を全て配列の<code>末尾</code>に追加します。</li>\n<li>配列の中身が空なら処理を終了、そうでなければ 2 に戻ります。</li>\n</ol>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// ノード数</span>\n<span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 各ノードに繋がっているノード番号</span>\n<span class=\"token keyword\">const</span> edge <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 探索を開始するノード番号を入れる</span>\n<span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 各ノードが探索済みかどうかを保持しておく配列</span>\n<span class=\"token keyword\">const</span> seen<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 配列が空になるまでループ</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 配列の末尾にあるノードを取り出す</span>\n  <span class=\"token keyword\">const</span> cur <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 取り出したノードに繋がっている、次のノード番号を列挙</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> next <span class=\"token keyword\">of</span> edge<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 次のノードが既に探索済みならスキップ</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seen<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 次のノードを探索済みにする</span>\n    seen<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 配列の末尾に次のノードを追加</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3>グリッドでの深さ優先探索</h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// マップ</span>\n<span class=\"token keyword\">let</span> map<span class=\"token operator\">:</span> Cell<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 開始位置/目的位置</span>\n<span class=\"token keyword\">let</span> sx<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> sy<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> gx<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> gy<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 未探索ノードを格納する配列</span>\n<span class=\"token keyword\">let</span> nexts<span class=\"token operator\">:</span> Point<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 開始地点から各ノードまでの距離</span>\n<span class=\"token comment\">// 各ノードが未探索かどうかの判定に使用される</span>\n<span class=\"token keyword\">let</span> dist<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 未探索ノード配列に開始地点を登録</span>\nnexts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> sx<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> sy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 各ノードまでの距離のデフォルト値の設定</span>\n<span class=\"token comment\">// 極端に大きい値や-1のような、設定されることがないであろう値を入れておく</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">INF</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">;</span>\ndist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  dist<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">W</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 開始位置までの距離を0にしておく</span>\ndist<span class=\"token punctuation\">[</span>sy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>sx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 探索候補が無くなったら目的のノードが発見できず探索失敗となる</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span> nexts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 配列から末尾要素のノードを取り出す</span>\n  <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> nexts<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cx<span class=\"token punctuation\">,</span> cy<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 目的のノードなら探索成功。ループ処理を抜ける</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cx <span class=\"token operator\">==</span> gx <span class=\"token operator\">&amp;&amp;</span> cy <span class=\"token operator\">==</span> gy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 繋がっているノード位置を計算</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tx <span class=\"token operator\">=</span> cx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ty <span class=\"token operator\">=</span> cy <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// マップ外や通れないノード、すでに探索済みのノードならcontinue</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> tx <span class=\"token operator\">&amp;&amp;</span> tx <span class=\"token operator\">&lt;</span> <span class=\"token constant\">W</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> ty <span class=\"token operator\">&amp;&amp;</span> ty <span class=\"token operator\">&lt;</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getTile</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> ty<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> Cell<span class=\"token punctuation\">.</span>Floor<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 開始ノードからの距離を更新することで、このノードは探索済みであることを示す</span>\n    dist<span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>cy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 未探索ノード配列に追加</span>\n    nexts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> tx<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> ty <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3>経路の出し方</h3>\n<p><img src=\"./static/images/0b021f8a/1.png\" alt=\"\">\nただ探索を行うのではなく、1-6-8 のように、開始～目的ノードまでの経路を出力したい場合があります。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">prevs<span class=\"token punctuation\">[</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>その場合は連想配列などを用意しておき、今探索しているノードを、繋がっている次のノードのインデックスをキーとして保存しておくという方法があります。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">prevs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>のノード<span class=\"token punctuation\">;</span>\nprevs<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>のノード<span class=\"token punctuation\">;</span>\nprevs<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>のノード<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>たとえば 1 に繋がっているノードが 2,3,4 の場合は上記のように保存しておくと、2,3,4 のノードから前のノードである 1 にいつでもアクセスが可能となります。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 連想配列を用意</span>\nprevs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span> nexts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> nexts<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cx<span class=\"token punctuation\">,</span> cy<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cx <span class=\"token operator\">==</span> gx <span class=\"token operator\">&amp;&amp;</span> cy <span class=\"token operator\">==</span> gy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tx <span class=\"token operator\">=</span> cx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ty <span class=\"token operator\">=</span> cy <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> tx <span class=\"token operator\">&amp;&amp;</span> tx <span class=\"token operator\">&lt;</span> <span class=\"token constant\">W</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> ty <span class=\"token operator\">&amp;&amp;</span> ty <span class=\"token operator\">&lt;</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getTile</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> ty<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> Cell<span class=\"token punctuation\">.</span>Floor<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n    dist<span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>cy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    nexts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> tx<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> ty <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 注目している地点(tx, ty)から前の地点(cur.x, cur.y)を参照するために連想配列に保存する</span>\n    prevs<span class=\"token punctuation\">[</span>ty <span class=\"token operator\">*</span> <span class=\"token constant\">W</span> <span class=\"token operator\">+</span> tx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> cx<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> cy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>グリッドでの経路保存例です。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> routes<span class=\"token operator\">:</span> Point<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 目的地点から逆に辿る</span>\n<span class=\"token keyword\">let</span> cx <span class=\"token operator\">=</span> gx<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> cy <span class=\"token operator\">=</span> gy<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 逆に辿っているため配列に追加するときは前から要素を入れる</span>\n  routes<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> cx<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> cy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 開始地点まで来たら終了</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cx <span class=\"token operator\">===</span> sx <span class=\"token operator\">&amp;&amp;</span> cy <span class=\"token operator\">===</span> sy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 連想配列から前の地点を取り出す</span>\n  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> cy <span class=\"token operator\">*</span> <span class=\"token constant\">W</span> <span class=\"token operator\">+</span> cx<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> prev <span class=\"token operator\">=</span> prevs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  cx <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n  cy <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>グリッドでの経路再現例です。</p>\n<h3>最短経路</h3>\n<p>深さ優先探索で得られる経路は、幅優先探索と違い、最短経路であると保証はされません。</p>\n<p>ただし目的地までのルートが一つしかない場合は必然的に最短経路になります。</p>\n"}},"__N_SSG":true}