{"pageProps":{"post":{"title":"gl_FragCoordの正規化","slug":"d238c2e8","content":"<h2>解説/アルゴリズム</h2>\n<pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token keyword\">vec2</span> uv <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>gl_FragCoord<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">*</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">-</span> vResolution<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>vResolution<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> vResolution<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>gl_FragCoord はよくこの形で正規化されることが多いのですが、なぜこうなるかを解説します。</p>\n<p>gl_FragCoord は Canvas のピクセル座標が格納されています。<br>\nただし、y 座標は上に行くほど大きくなるので、左下が (0, 0) 、右上が (キャンバスの幅, キャンバスの高さ) になります。</p>\n<p>この gl_FragCoord を クリップ空間と同じの -1.0 ～ 1.0 の範囲に正規化するのが目的です。</p>\n<p>まずは Canvas の縦横が同じサイズだった場合について考えてみます。</p>\n<pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token keyword\">vec2</span> uv <span class=\"token operator\">=</span> gl_FragCoord<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">/</span> vResolution <span class=\"token operator\">*</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">-</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>gl_FragCoord を Canvas のサイズで割ることで 0.0 ～ 1.0 の範囲に変換します。<br>\nこの範囲を 2 倍することで、0.0 ～ 2.0 の範囲に変換します。<br>\n更にこの範囲から -1.0 を引くことで、 -1.0 ～ 1.0 の範囲に変換することができました。</p>\n<p>次は Canvas の縦横が異なるサイズだった場合について考えてみます。</p>\n<pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token keyword\">vec2</span> uv <span class=\"token operator\">=</span> gl_FragCoord<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">/</span> vResolution<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>縦横のサイズが異なる場合で縦横比を維持したい場合は、Canvas の幅か高さどちらか一方で割らなければなりません。</p>\n<p>今回は高さで割ることにします。</p>\n<pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token keyword\">vec2</span> uv <span class=\"token operator\">=</span> gl_FragCoord<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">/</span> vResolution<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">vec2</span><span class=\"token punctuation\">(</span>vResolution<span class=\"token punctuation\">.</span>x <span class=\"token operator\">/</span> vResolution<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>vResolution.y で割って正規化する場合、縦のサイズは 1 ですが、横は vResolution.x / vResolution.y です。\nですので、 <code>-1.0</code> の部分を、<code>vec2(vResolution.x / vResolution.y, 1.0)</code> にする必要があります。</p>\n<p>各項の vResolution.y で割るところを括りだすと、</p>\n<pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token keyword\">vec2</span> uv <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>gl_FragCoord<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">*</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">vec2</span><span class=\"token punctuation\">(</span>vResolution<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> vResolution<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> vResolution<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>となり、 <code>vec2(vResolution.x, vResolution.y)</code> はただの vResolution のことなので、</p>\n<pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token keyword\">vec2</span> uv <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>gl_FragCoord<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">*</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">-</span> vResolution<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> vResolution<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>と書くことができます。</p>\n"}},"__N_SSG":true}