{"pageProps":{"post":{"title":"渦巻き","slug":"e0653671","content":"<h2>実行例</h2>\n<p><img src=\"./static/images/e0653671/0.jpg\" alt=\"\">\n<img src=\"./static/images/e0653671/1.png\" alt=\"\"></p>\n<h2>ソースコード</h2>\n<h3>TypeScript</h3>\n<p><a href=\"./static/code/e0653671/0.jpg\">0.jpg</a> / <a href=\"./static/code/e0653671/app.ts\">app.ts</a></p>\n<h2>解説/アルゴリズム</h2>\n<p>円形内の範囲を回転させるが、外側に行くほど回転が弱まるように設定する。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> radius <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 半径</span>\n<span class=\"token keyword\">const</span> maxRad <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大回転のラジアン値</span>\n</code></pre>\n<p>半径 <code>radius</code> 内が画像処理の対象で、円の中心部分に近づくにつれて回転が強まり、円の外側に近づくにつれて回転が弱まる。</p>\n<p>（円の中心～外側が<code>maxRad～0</code>ラジアンの回転に対応する）</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dest <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">createImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndest<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>\n  image<span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>\n  image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>\n  image<span class=\"token punctuation\">.</span>height\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndest<span class=\"token punctuation\">.</span><span class=\"token function\">loadPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>あるピクセルを別のピクセルにコピーするアルゴリズムなので、入力と出力画像は分けておく。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 円の中心位置</span>\n<span class=\"token keyword\">const</span> cx <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cy <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 円の中心から対象位置までの距離を求める</span>\n    <span class=\"token keyword\">const</span> dist <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>cx<span class=\"token punctuation\">,</span> cy<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 円の中心に近いほどthis.radの値に近づくようにする</span>\n    <span class=\"token comment\">// 円の範囲外は回転する必要が無いので0を入れる</span>\n    <span class=\"token keyword\">const</span> rad <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> maxRad<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// radラジアンが0より大きければ回転する必要があるので回転行列を使用して回転後の位置を求める</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rad <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> tx <span class=\"token operator\">=</span>\n        cx <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> cx<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> cy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> ty <span class=\"token operator\">=</span>\n        cy <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> cx<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>rad<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> cy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> <span class=\"token function\">getPixel</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> tx<span class=\"token punctuation\">,</span> ty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setPixel</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>ピクセルの抜け対策のため、回転後のピクセル (x, y) から回転前のピクセル (tx, ty) を<a href=\"/3cdbb328\">回転行列</a>で求める。</p>\n<h2>内部で利用しているアルゴリズム</h2>\n<p><a href=\"/b98d6da4\">2 点間の直線距離</a>, <a href=\"/2e71b23a\">範囲変更による値のマッピング</a>, <a href=\"/3cdbb328\">回転行列</a></p>\n"}},"__N_SSG":true}